
cd $DEV_PATH;

echo 'Development setup';
echo '';

setup() {

    mysql() {
        local mysql_version="$1"
        local file="${DEV_WORKPATH}/conf/mysql$mysql_version"
        local endis='';
        local volume_name="dockerdev-mysql${mysql_version}-volume"
        local service_name="db${mysql_version}"

        if [ -z "${mysql_version}" ]; then
            endis='n'
            mysql_version='5.7'
        fi

        if [ -z "${endis}" ]; then
            if [ -e ${file} ]; then
                endis='n'
            else
                endis='y'
            fi
        fi

        if [ "${endis}" == 'y' ]; then
            return 0;
        fi

        if [ -z "`${DEV_SUDO} docker volume ls -q -f 'name=${volume_name}'`" ]; then
            echo "Create a persistant database volume for MySQL version ${mysql_version}";
            ${DEV_SUDO} docker volume create ${volume_name};
        fi

        ./${DEV_SELF} setup-mysql ${service_name};
        return $?;
    }

    workspace() {
        if [ -z "`${DEV_SUDO} docker volume ls -q -f 'name=dockerdev-workspace-volume'`" ]; then
            echo 'Create workspace volume in location '${DEV_WORKSPACE_PATH};
            ${DEV_SUDO} docker volume create -o 'type=none' -o 'device='${DEV_WORKSPACE_PATH} -o 'o=bind' dockerdev-workspace-volume
        fi
    }

    php() {
        dc php && echo 'PHP configured with version '${DEV_PHP} && return 1;

        local versions="`dc php_versions`" version='';
        echo "Which default PHP version should we enable";
        for v in ${versions}; do
            echo "- ${v}";
        done

        read -p'? ' version;
        [ -z "${version}" ] && return 1;

        touch ${DEV_WORKSPACE_PATH}/.${version};

        echo 'COMPOSER_MEMORY_LIMIT=-1' >> ${DEV_WORKPATH}/.env;

        return 0;
    }

    suffix() {
        if [ -n "${DOMAINSUFFIX}" ]; then
            echo 'Listening on "*'${DOMAINSUFFIX}'"';
            return 1;
        fi

        local suffix='' default='.localhost';
        echo 'Which domain suffix do you want to listen to - default: '${default}'';
        read -p' ' suffix;
        if [ -z "${suffix}" ]; then
            suffix=${default};
        fi

        echo 'DOMAINSUFFIX='${suffix} >> ${DEV_WORKPATH}/.env;
        export DOMAINSUFFIX=${suffix};

        return 0;
    }

    feature() {
        local name="$1" file="${DEV_WORKPATH}/conf/$2"
        local endis="$3" a="";

        if [ -z "${endis}" ]; then
            if [ -e ${file} ]; then
                endis='n'
            else
                endis='y'
            fi
        fi

        if [ "${endis}" == 'y' ]; then
            echo "The service '${name}' is currently DISABLED, type Y to ENABLE the service '${name}'? (press enter to skip)";
        else
            echo "The service '${name}' is currently ENABLED, typing Y will DISABLE the service '${name}'? (press enter to leave unchanged)";
        fi

        while read -p'? (N/y)' -n1 a; do
            echo '';
            if [ "${a}" == 'Y' ] || [ "${a}" == 'y' ]; then
                break;
            elif [ -z "${a}" ] || [ "${a}" == 'N' ] || [ "${a}" == 'n' ]; then
                return 0;
            fi
        done

        if [ "${endis}" == 'y' ]; then
            touch ${file};
        else
            rm -f ${file} 2>&1 >/dev/null;
        fi
    }

    start() {
        ./${DEV_SELF} up;
    }

    shell() {
        echo '';
        echo 'Add next lines to your shell to implement `cdw`(to workspace) and `dev` to PATH';
        echo '';
        ./${DEV_SELF} profile;
    }

    suffix;
    php;
    workspace;
    mysql;

    feature RabbitMQ rabbitmq;
    feature "Percona 8" mysql8; mysql 8;
    feature "ElasticSearch 6.5.4" elasticsearch;
    feature "ElasticSearch 7.9.1" elasticsearch7;
    feature "ElasticSearch HQ" elasticsearchhq;
    feature "ElasticSearch VUE" elasticvue;
    feature MongoDB mongo;
    feature FTP ftp;

    start;
    shell;
}

setup;
return 0;

